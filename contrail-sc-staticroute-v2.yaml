heat_template_version: 2015-04-30

parameters:

  management_network:
    type: string
    description: Name of management network to be created
  left_vn:
    type: string
    description: Name of left network to be created
  right_vn:
    type: string
    description: Name of right network to be created
  template_VirtualNetwork_1:
    type: string
    description: Name of management network to be created
  template_VirtualNetwork_2:
    type: string
    description: Name of left network to be created
  template_VirtualNetwork_3:
    type: string
    description: Name of right network to be created
  image:
    type: string
    description: Name of the image
  flavor:
    type: string
    description: Flavor
  fq_name:
    type: string
    description: Service instance FQDN for port tuple

  domain:
    type: string
    description: Name of the Domain
  st_name:
    type: string
    label: Service template fq name
    description: Service template for port tuple
  st_version:
    type: string
    description: Indicates service version
  st_service_mode:
    type: string
    description: service mode
  st_service_type:
    type: string
    description: service type
  st_interface_type_1:
    type: string
    description: service_interface_type for the ServiceTemplate
  st_interface_type_2:
    type: string
    description: service_interface_type for the ServiceTemplate
  st_interface_type_3:
    type: string
    description: service_interface_type for the ServiceTemplate
  st_availability_zone:
    type: string
    description: Indicates availability zone is enabled
  st_virtualization_type:
    type: string
    description: Indicates virtualization type

  service_instance_name:
    type: string
    label: Service instance name
    description: Service instance for port tuple
  service_instance_fq_name:
    type: string
    label: Service instance fq name
    description: Service instance FQDN for port tuple

  svm_name:
    type: string
    description: Name of the SVM
  svm_name_1:
    type: string
    description: Name of the SVM

# Interface Static Prefix
  static_route_name:
    type: string
    description: name for the InterfaceRouteTable
  project:
    type: string
    description: project for the InterfaceRouteTable
  static_display_name:
    type: string
    description: display_name for the InterfaceRouteTable
  static_route_prefix_1:
    type: string
    description: prefix for the InterfaceRouteTable
  si_name:
    type: string
    description: SI FQDN name for the InterfaceRouteTable

resources:

  template_ServiceTemplate:
    type: OS::Contrail::ServiceTemplate
    properties:
      name: { get_param: st_name }
      service_template_properties:
        {
          service_template_properties_version: { get_param: st_version },
          service_template_properties_service_mode: { get_param: st_service_mode },
          service_template_properties_service_type: { get_param: st_service_type },
          service_template_properties_interface_type:
            [
              {
              service_template_properties_interface_type_service_interface_type: { get_param: st_interface_type_2 },
              },
              {
              service_template_properties_interface_type_service_interface_type: { get_param: st_interface_type_3 },
              }
            ],
          service_template_properties_service_virtualization_type: { get_param: st_virtualization_type },
        }
      domain: { get_param: domain }

  template_ServiceInstance:
    type: OS::Contrail::ServiceInstance
    depends_on: [ template_ServiceTemplate ]
    properties:
      name: { get_param: service_instance_name }
      service_instance_properties:
        {
          service_instance_properties_interface_list:
            [
              {
              service_instance_properties_interface_list_virtual_network: { get_param: left_vn }

              },
              {
              service_instance_properties_interface_list_virtual_network: { get_param: right_vn }

              }
            ],
        }
      service_template_refs: { get_resource: template_ServiceTemplate }

  template_PortTuple1:
    type: OS::Contrail::PortTuple
    depends_on: [ template_ServiceInstance ]
    properties:
      service_instance: { list_join: [':', { get_attr: [ template_ServiceInstance, fq_name ] } ] }

  template_PortTuple2:
    type: OS::Contrail::PortTuple
    depends_on: [ template_ServiceInstance ]
    properties:
      service_instance: { list_join: [':', { get_attr: [ template_ServiceInstance, fq_name ] } ] }

  template_VirtualMachineInterface_1:
    type: OS::Contrail::VirtualMachineInterface
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_1 },
        }
      virtual_network_refs: { get_param: management_network }

  template_VirtualMachineInterface_2:
    type: OS::Contrail::VirtualMachineInterface
    depends_on: [ template_PortTuple1 ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_2 },
        }
      port_tuple_refs: { get_resource: template_PortTuple1 }
      virtual_network_refs: { get_param: left_vn }

  template_VirtualMachineInterface_3:
    type: OS::Contrail::VirtualMachineInterface
    depends_on: [ template_PortTuple1 ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_3 },
        }
      port_tuple_refs: { get_resource: template_PortTuple1 }
      virtual_network_refs: { get_param: right_vn }

  template_VirtualMachineInterface_4:
    type: OS::Contrail::VirtualMachineInterface
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_1 },
        }
      virtual_network_refs: { get_param: management_network }

  template_VirtualMachineInterface_5:
    type: OS::Contrail::VirtualMachineInterface
    depends_on: [ template_PortTuple2 ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_2 },
        }
      port_tuple_refs: { get_resource: template_PortTuple2 }
      virtual_network_refs: { get_param: left_vn }

  template_VirtualMachineInterface_6:
    type: OS::Contrail::VirtualMachineInterface
    depends_on: [ template_PortTuple2 ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_3 },
        }
      port_tuple_refs: { get_resource: template_PortTuple2 }
      virtual_network_refs: { get_param: right_vn }


  template_InstanceIp_1:
    type: OS::Contrail::InstanceIp
    depends_on: [ template_VirtualMachineInterface_1 ]
    properties:
      virtual_machine_interface_refs: { get_resource: template_VirtualMachineInterface_1 }
      virtual_network_refs: { get_param: template_VirtualNetwork_1 }

  template_InstanceIp_2:
    type: OS::Contrail::InstanceIp
    depends_on: [ template_VirtualMachineInterface_2 ]
    properties:
      virtual_machine_interface_refs: { get_resource: template_VirtualMachineInterface_2 }
      virtual_network_refs: { get_param: template_VirtualNetwork_2 }

  template_InstanceIp_3:
    type: OS::Contrail::InstanceIp
    depends_on: [ template_VirtualMachineInterface_3 ]
    properties:
      virtual_machine_interface_refs: { get_resource: template_VirtualMachineInterface_3 }
      virtual_network_refs: { get_param: template_VirtualNetwork_3 }

  template_InstanceIp_4:
    type: OS::Contrail::InstanceIp
    depends_on: [ template_VirtualMachineInterface_4 ]
    properties:
      virtual_machine_interface_refs: { get_resource: template_VirtualMachineInterface_4 }
      virtual_network_refs: { get_param: template_VirtualNetwork_1 }

  template_InstanceIp_5:
    type: OS::Contrail::InstanceIp
    depends_on: [ template_VirtualMachineInterface_5 ]
    properties:
      virtual_machine_interface_refs: { get_resource: template_VirtualMachineInterface_5 }
      virtual_network_refs: { get_param: template_VirtualNetwork_2 }

  template_InstanceIp_6:
    type: OS::Contrail::InstanceIp
    depends_on: [ template_VirtualMachineInterface_6 ]
    properties:
      virtual_machine_interface_refs: { get_resource: template_VirtualMachineInterface_6 }
      virtual_network_refs: { get_param: template_VirtualNetwork_3 }

  instance1:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_1, template_InstanceIp_2, template_InstanceIp_3 ]
    properties:
      name: {get_param: svm_name }
      image: { get_param:  image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_1 }
        - port: { get_resource: template_VirtualMachineInterface_2 }
        - port: { get_resource: template_VirtualMachineInterface_3 }

  instance2:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_4, template_InstanceIp_5, template_InstanceIp_6 ]
    properties:
      name: {get_param: svm_name_1 }
      image: { get_param:  image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_4 }
        - port: { get_resource: template_VirtualMachineInterface_5 }
        - port: { get_resource: template_VirtualMachineInterface_6 }

  template_InterfaceRouteTable:
    type: OS::Contrail::InterfaceRouteTable
    depends_on: [ template_ServiceInstance ]
    properties:
      name: { get_param: static_route_name }
      fq_name: { get_param: fq_name }
      display_name: { get_param: static_display_name }
      interface_route_table_routes:
        {
          interface_route_table_routes_route:
            [{
              interface_route_table_routes_route_prefix: { get_param: static_route_prefix_1 }
            }],
        }
      service_instance_refs: { get_param: si_name }
      service_instance_refs_data:
        {
          service_instance_refs_data_interface_type: { get_param: st_interface_type_3 },
        }
      project: { get_param: project }
